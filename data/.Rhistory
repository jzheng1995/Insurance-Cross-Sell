import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import zipfile
from zipfile import ZipFile
# opening the zip file in READ mode
file_name = "playground-series-s4e7.zip"
with ZipFile(file_name, 'r') as zip:
# printing all the contents of the zip file
zip.printdir()
# import
df_zip = zipfile.ZipFile(file_name)
train = pd.read_csv(df_zip.open('train.csv'))
test = pd.read_csv(df_zip.open('test.csv'))
sample_submission = pd.read_csv(df_zip.open('sample_submission.csv'))
train.info()
len(train)
import random
n = len(train) # Calculate number of rows in file
s = n//10  # sample size of 10%
skip = sorted(random.sample(range(1, n+1), n-s))
train_sample = pd.read_csv(df_zip.open('train.csv'), skiprows = skip)
train_sample
trainhead = train_sample.head(10)
train_sample["Driving_License"].value_counts()
train_sample["Vintage"].value_counts()
train_sample["id"].value_counts().sort_values( ascending = False).head(10)
y_counts = train_sample.Response.value_counts()
fig_exit = sns.barplot(x = y_counts.index, y = y_counts.values)
y_counts
train_sample.Response.value_counts(normalize = True)
plt.show()
strings = ['object']
string_df = train_sample.select_dtypes(include = strings)
other_cat = train_sample[["Region_Code", "Policy_Sales_Channel"]].astype("category")
cat_df = pd.concat([string_df,other_cat] , axis = 1)
for col in cat_df.columns:
cat_desc = sns.catplot(x = col, data = cat_df, kind = "count",
order = cat_df[col].value_counts().index)
if col in ["Region_Code", "Policy_Sales_Channel"]:
plt.xticks(rotation=90)
plt.show()
from seaborn import histplot
numeric_df = train_sample.select_dtypes(include = "number")
for col in numeric_df.columns:
numeric_df.col.plot.hist()
plt.show()
for col in numeric_df.columns:
numeric_df[col].plot.hist()
plt.show()
numeric_df["Age"].plot.hist()
plt.show()
sns.displot(numeric_df, x="Age")
sns.displot(numeric_df, x="Age")
plt.show()
for col in numeric_df.columns:
sns.displot(numeric_df, x=col)
plt.show()
from sklearn.model_selection import train_test_split
from pandas.api.types import CategoricalDtype
# drop id columns
train.drop(["id"],axis = 1, inplace = True)
train_sample.drop(["id"],axis = 1, inplace = True)
# change column type
# features
x_train = train.drop(["Response"], axis = 1)
# label
y_train = train.Response
X_data, X_valid, y_data,y_valid =  train_test_split(x_train, y_train, test_size=0.25,  random_state=42, stratify = y_train)
# change column type
# features
x_train = train_sample.drop(["Response"], axis = 1)
# label
y_train = train_sample.Response
X_data, X_valid, y_data,y_valid =  train_test_split(x_train, y_train, test_size=0.25,  random_state=42, stratify = y_train)
from sklearn.model_selection import train_test_split
from pandas.api.types import CategoricalDtype
# drop id columns
train.drop(["id"],axis = 1, inplace = True)
# features
x_train = train.drop(["Response"], axis = 1)
# label
y_train = train.Response
X_data, X_valid, y_data,y_valid =  train_test_split(x_train, y_train, test_size=0.25,  random_state=42, stratify = y_train)
# sample split
train_sample.drop(["id"],axis = 1, inplace = True)
# features
xs_train = train_sample.drop(["Response"], axis = 1)
# label
ys_train = train_sample.Response
Xs_data, Xs_valid, ys_data,ys_valid =  train_test_split(xs_train, ys_train, test_size=0.25,  random_state=42, stratify = ys_train)
data_dia = ys_train
data_num = xs_train.select_dtypes(include = "number")
data_n_2 = (data_num - data_num.mean()) / (data_num.std())              # standardization
data = pd.concat([ys_train,data_n_2.iloc[:,0:10]],axis=1)
data = pd.melt(data,id_vars="Response",
var_name="features",
value_name='value')
plt.figure(figsize=(10,10))
sns.violinplot(x="features", y="value", hue="Response", data=data,split=True, inner="quart")
plt.xticks(rotation=90)
plt.show()
plt.show()
f,ax = plt.subplots(figsize=(18, 18))
sns.heatmap(numeric_df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)
# This sets the yticks "upright" with 0, as opposed to sideways with 90.
plt.yticks(rotation=0)
plt.xticks(rotation=90)
plt.show()
library(reticulate)
library(tidyverse)
library(kableExtra)
# tabulate python tables
pytable <- function(object, row = 0){
if(row == 0){
py[object] %>% kbl() %>%
kable_material_dark()
} else {
py[object] %>% head(row) %>% kbl() %>%
kable_material_dark()
}}
reticulate::repl_python()
"trainhead" %>% pytable()
reticulate::repl_python()
